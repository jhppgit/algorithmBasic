package algorithm.ch06;

import algorithm.ch04.IntStack;

// 비재귀적으로 퀵정렬 구현
public class QuickSort2 {
	static void swap(int[] a, int idx1, int idx2) {
		int temp = a[idx1];
		a[idx1] = a[idx2];
		a[idx2] = temp;
	}
	
	static void quickSort(int[] a, int left, int right) {
		IntStack lStack = new IntStack(right - left + 1); // 담당하는 배열의 길이만큼
		IntStack rStack = new IntStack(right - left + 1);
		
		lStack.push(left);
		lStack.push(right);
		
		while(lStack.isEmpty() != true) {
			int pl = left = lStack.pop();
			int pr = right = rStack.pop();
			int x = a[(left + right) / 2];
			
			do {
				while (a[pl] < x) pl++;
				while (a[pr] > x) pr--;
				if (pl <= pr)
					swap(a, pl++, pr--);
			} while (pl <= pr);
			
			if (left < pr) {
				lStack.push(left);
				rStack.push(pr);
			}
			if (pl < right) {
				lStack.push(pl);
				rStack.push(right);
			}
		}
	}
}
