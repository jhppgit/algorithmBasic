package algorithm.ch04;

// int형 고정길이 스택
public class IntStack {
	private int[] stk; // 스택용 배열
	private int capacity; // 스택 용량
	private int ptr; // 스택 포인터
	
	// 실행 시 예외: 스택이 비어있음
	public class EmptyIntStackException extends RuntimeException {
		public EmptyIntStackException() { }
	}
	
	// 실행 시 예외: 스택이 가득 참
	public class OverflowIntStackException extends RuntimeException {
		public OverflowIntStackException() { }
	}
	
	// 생성자
	public IntStack(int maxlen) {
		ptr = 0;
		capacity = maxlen;
		try {
			stk = new int[capacity]; // 스택 본체용 배열을 생성
		} catch (OutOfMemoryError e) {
			capacity = 0;
		}
	}
	
	// 스택에 x를 푸시
	public int push(int x) throws OverflowIntStackException {
		if (ptr >= capacity)
			throw new OverflowIntStackException();
		return stk[ptr++] = x; // 배열에 넣고 포인터를 올린다. 대입연산자의 반환값은 대입된 값
	}
	
	// 스택에서 데이터를 팝(꼭대기에 있는 데이터를 꺼냄)
	public int pop() throws EmptyIntStackException {
		if (ptr <= 0)
			throw new EmptyIntStackException();
		return stk[--ptr]; // 포인터를 내리고 배열에 접근 후 반환한다
	}
	
	// 스택에서 데이터를 피크(꼭대기에 있는 데이터를 들여다봄)
	public int peek() throws EmptyIntStackException {
		if (ptr <= 0)
			throw new EmptyIntStackException();
		return stk[ptr - 1];
	}
	
	// 스택을 비움
	public void clear() {
		ptr = 0;
	}
	
	// 스택에서 x를 찾아 인덱스(없으면 -1)를 반환
	public int indexOf(int x) {
		for (int i = ptr - 1; i >= 0; i--) // top 에서 bottom으로 검색
			if (stk[i] == x)
				return i;
		return -1;
	}
	
	// 스택의 용량을 반환
	public int getCapacity() {
		return capacity;
	}
}
