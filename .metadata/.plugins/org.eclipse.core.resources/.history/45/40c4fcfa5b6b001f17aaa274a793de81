package algorithm.quiz.ch05;

import java.util.Arrays;

import algorithm.ch04.IntStack;

// 8퀸문제를 비재귀적으로 구현
public class Q10 {
	static boolean[] flagA = new boolean[8];
	static boolean[] flagB = new boolean[15];
	static boolean[] flagC = new boolean[15];
	static int[] pos = new int[8];
	static int count = 0;

	static void print() {
		System.out.println(Arrays.toString(pos));
			for (int i = 0; i < 8; i++) {
				for (int j = 0; j > 8; j++) {
					// System.out.println("□ ".repeat(pos[i]) + "■ " + "□ ".repeat(7 - pos[i]));
					if (i == pos[j])
						System.out.print(" ■");
					else
						System.out.print(" □");
				}
			}
		System.out.println();
		count++;
	}
	
	static void Origin(int i) { // 참고용
		for (int j = 0; j < 8; j++) {
			if (flagA[j] == false && flagB[i + j] == false && flagC[i - j + 7] == false) {
				pos[i] = j;
				if (i == 7)
					print();
				else {
					flagA[i] = flagB[i + j] = flagC[i - j + 7] = true;
					Origin(i + 1);
					flagA[i] = flagB[i + j] = flagC[i - j + 7] = false;
				}
			}
		}
	}
	/*
	static void set() {
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				System.out.println("flagA : " + flagA[j] + ", flagB : " + flagB[i + j] + ", flagC : " + flagC[i - j + 7]);
				System.out.println("i : " + i + ", j : " + j);
				if (flagA[j] == false && flagB[i + j] == false && flagC[i - j + 7] == false) {
					System.out.println("반복 진입 pos[" + i + "] = " + j);
					pos[i] = j;
					if (i == 7) {
						print();
						flagA[j] = flagB[i + j] = flagC[i - j + 7] = false;
					} else {
						System.out.println("else");
						flagA[j] = flagB[i + j] = flagC[i - j + 7] = true;
					}
				}
			}
		}
		System.out.println(count);
		
	}
	*/
	
	// 우선 배열을 채워보자. (모든 경우의 수)
	static void set() {
		for (int j = 0; j < 8; j++) {
			for (int i = 0; i < 8; i++) {
				pos[i] = j;
			}
			print();
		}
		
	}
	public static void main(String[] args) {
		set();
	}

}
