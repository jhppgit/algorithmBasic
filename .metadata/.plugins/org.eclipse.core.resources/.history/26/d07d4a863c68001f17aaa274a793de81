package algorithm.quiz.ch05;

import java.util.Scanner;
import java.util.Stack;

import algorithm.ch04.IntStack;

// recur3 메서드를 비재귀적으로 구현
public class Q6 {
	static void recur3(int n) {
		if (n > 0) {
			recur3(n - 1);
			recur3(n - 2);
			System.out.println(n);
		}
	}
	
	static void nonRecur3(int n) {
		IntStack s = new IntStack(n * 2);
		int count = 0;
		while (true) {
			count++;
			if (count > 40) break;
			if (n > 0) {
				s.push(n);
				if (n - 2 > 0)
					s.push(n - 2);
				n--;
				continue;
			}
			break;
		}
		while(!s.isEmpty()) {
			n = s.pop();
			System.out.println(n);
		}
	}
	
	 static void recur(int n) {
	        Stack<Integer> stack = new Stack<>();
	        stack.push(n);

	        while (!stack.isEmpty()) {
	            int current = stack.pop();
	            
	            if (current > 0) {
	                // recur(n - 2) 호출 시뮬레이션
	                if (current - 2 > 0) {
	                    stack.push(current - 2);
	                }
	                
	                // recur(n - 1) 호출 시뮬레이션
	                if (current - 1 > 0) {
	                    stack.push(current - 1);
	                }
	                
	                // 현재 값 저장 (출력을 위해)
	                stack.push(-current);
	            } else if (current < 0) {
	                // 음수 값은 출력을 위해 저장된 값
	                System.out.println(-current);
	            }
	        }
	    }
	
	static void testRec(int n) {
		if (n > 0) {
			testRec(n - 1);
			System.out.println(n);
			testRec(n - 2);
		}
	}
	
	static void testRec2(int n) {
		while (n > 0) {
			testRec(n - 1);
			System.out.println(n);
			n -= 2;
		}
	}
	
	static void testRec3(int n) {
		IntStack s = new IntStack(n);
		while(n > 0) {
			s.push(n);
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.print("정수 입력 : ");
		int x = sc.nextInt();
		sc.close();
		System.out.println("재귀");
		recur3(x);
		System.out.println("비재귀");
		nonRecur3(x);
	}
}
