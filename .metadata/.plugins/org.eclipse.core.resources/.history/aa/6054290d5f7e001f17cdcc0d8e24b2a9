package algorithm.quiz.ch08;

import java.util.Comparator;

// 배열을 사용하는 원형리스트 구현, retrieve, purge 메서드도.
public class Q8 {
	class ArrayLinkedList<E> {
		class Node<E> {
			E data;
			int next;
			int dnext;
			
			void set(E data, int next) {
				this.data = data;
				this.next = next;
			}
		}
		
		private int head;
		private int crnt;
		private int deleted;
		private int max;
		private int size;
		private Node<E>[] n;
		public static final int NULL = -1;
		
		public ArrayLinkedList(int capacity) {
			head = crnt = deleted = max = NULL;
			try {
				n = new Node[capacity];
				for (int i = 0; i < capacity; i++)
					n[i] = new Node<E>();
				size = capacity;
			} catch (OutOfMemoryError e) {
				size = 0;
			}
		}
		
		private int getInsertIndex() {
			if (deleted == NULL) {
				if (max < size)
					return max++;
				else
					return NULL;
			} else {
				int rec = deleted;
				deleted = n[rec].dnext;
				return rec;
			}
		}
		
		private void deleteIndex(int idx) {
			if (deleted == NULL) {
				deleted = idx;
				n[idx].dnext = NULL;
			} else {
				int rec = deleted;
				deleted = idx;
				n[idx].dnext = rec;
			}
		}
		
		public Node<E> search(E obj, Comparator<? super E> c) {
			if (head == NULL)
				return null;
			else {
				int ptr = head;
				while (ptr != NULL) {
					if (c.compare(obj, n[ptr].data) == 0) {
						crnt = ptr;
						return n[ptr];
					}
					ptr = n[ptr].next;
				}
				return null;
			}
		}
		
		public void addFirst(E obj) {
			int ptr = head;
			int rec = getInsertIndex();
			if (rec != NULL) {
				head = crnt = rec;
				n[rec].set(obj, ptr);
			}
		}
	}
}
